<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on ELL Blog</title>
    <link>https://elibroftw.github.io/tags/tutorial/</link>
    <description>ELL Blog (tutorial)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 07 Feb 2022 11:08:15 -0500</lastBuildDate>
    
    <atom:link href="https://elibroftw.github.io/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkins Snippets</title>
      <link>https://elibroftw.github.io/posts/jenkins-snippets/</link>
      <pubDate>Mon, 07 Feb 2022 11:08:15 -0500</pubDate>
      
      <guid>https://elibroftw.github.io/posts/jenkins-snippets/</guid>
      <description>&lt;h2 id=&#34;ignorable-preface&#34; &gt;Ignorable Preface
&lt;span&gt;
    &lt;a href=&#34;#ignorable-preface&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;One of my tasks at work was to prevent builds aborted by &lt;code&gt;kill_outdated_builds()&lt;/code&gt; from resuming upon a Jenkins restart. After I finished that one, I got a task later to remove all unsafe method usages, mainly the use of &lt;code&gt;getRawBuild&lt;/code&gt; which was used beyond the aforementioned function. It is used liberally on StackOverFlow, which is unfortunate, as if a public repository decides to use the function, there will be a massive security hole.&lt;/p&gt;
&lt;p&gt;These two snippets are a safe but rather unintuitive way to abort builds and get the build log in Jenkins. They took hours of research just to figure out and implement.&lt;/p&gt;
&lt;h2 id=&#34;aborting-old--outdated-builds&#34; &gt;Aborting Old / Outdated Builds
&lt;span&gt;
    &lt;a href=&#34;#aborting-old--outdated-builds&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; hudson.model.ParametersAction
&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; jenkins.model.Jenkins
&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; jenkins.model.CauseOfInterruption
&lt;span style=&#34;color:#0f0&#34;&gt;// type of _build in case you need it
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;// import org.jenkinsci.plugins.workflow.job.WorkflowRun
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;

@NonCPS
&lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;abortOldBuilds&lt;/span&gt;() {
    &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; job = Jenkins.instanceOrNull.getItem(JOB_NAME)
    &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; build_id = BUILD_ID
    &lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; _build: job.builds) {  &lt;span style=&#34;color:#0f0&#34;&gt;// or job.getBuilds()
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; _build_id = _build.id &lt;span style=&#34;color:#f00&#34;&gt;as&lt;/span&gt; INT
        &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; _pr_number = _build.allActions.find(it &lt;span style=&#34;color:#f00&#34;&gt;in&lt;/span&gt; ParametersAction).getParameter(&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;pr_number&amp;#34;&lt;/span&gt;).value
        &lt;span style=&#34;color:#0f0&#34;&gt;// optionally filter out builds
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (_pr_number == pr_number) {
            &lt;span style=&#34;color:#0f0&#34;&gt;// pr_number is paramaterized and stands for `pull request number`
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; (_build.isBuilding() &amp;amp;&amp;amp; _build_id &amp;lt; build_id) {
                &lt;span style=&#34;color:#0f0&#34;&gt;// abort this build since it&amp;#39;s running and outdated
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; cause = &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Aborted by build #${build_id} for being outdated (PR #${pr_number})&amp;#34;&lt;/span&gt;
                _build.getListner().getLogger().println(cause)
                _build.doStop()
                echo &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;Aborted build #${_build_id}&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#0f0&#34;&gt;// Add aborted cause to _build status page (Hack)
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#0f0&#34;&gt;//  this way keeps the build as ABORTED and prevents builds from resuming upon a Jenkins restart
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; r = &lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(Arrays.asList({ cause &lt;span style=&#34;color:#f00&#34;&gt;as&lt;/span&gt; String } &lt;span style=&#34;color:#f00&#34;&gt;as&lt;/span&gt; CauseOfInterruption))
                _build.addAction(&lt;span style=&#34;color:#f00&#34;&gt;new&lt;/span&gt; InterruptedBuildAction(r))
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;getting-build-log&#34; &gt;Getting Build Log
&lt;span&gt;
    &lt;a href=&#34;#getting-build-log&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;color:#f00&#34;&gt;import&lt;/span&gt; jenkins.model.Jenkins

@NonCPS
&lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;getLog&lt;/span&gt;() {
    &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; job = Jenkins.instanceOrNull.getItem(JOB_NAME)
    &lt;span style=&#34;color:#ee82ee&#34;&gt;def&lt;/span&gt; build = job.getBuildByNumber(Integer.parseInt(BUILD_NUMBER))
    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; build.logFile.text
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Bash Tutorial Script</title>
      <link>https://elibroftw.github.io/posts/bash-helpers/</link>
      <pubDate>Wed, 26 Jan 2022 12:38:14 -0500</pubDate>
      
      <guid>https://elibroftw.github.io/posts/bash-helpers/</guid>
      <description>&lt;p&gt;It seems that many article tutorials on &lt;code&gt;bash&lt;/code&gt; are ugly, are unoptimal, and do not get to the point. This tutorial is about parsing flags, and using the flag later. Remember, when using variables that could have spaces, use double quotes! &lt;code&gt;&amp;quot;$could_have_spaces&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;argument-parsing-conditionals-booleans-loops-and-adding&#34; &gt;Argument Parsing, Conditionals, &amp;ldquo;Booleans,&amp;rdquo; Loops, and Adding
&lt;span&gt;
    &lt;a href=&#34;#argument-parsing-conditionals-booleans-loops-and-adding&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;Conditionals include if, elif (else if), and else. They also cover -eq, -ne, &amp;amp;&amp;amp;, ||.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;flag1&lt;/span&gt;=false
&lt;span style=&#34;color:#eedd82&#34;&gt;flag_override&lt;/span&gt;=false
&lt;span style=&#34;color:#eedd82&#34;&gt;last_arg&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#0f0&#34;&gt;# I think getopts is overkill especially if the numbers of arguments varies&lt;/span&gt;

&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; arg in &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$@&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# better to have do on the same line than a newline&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;--flag1&amp;#34;&lt;/span&gt; ] || [ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;--flag&amp;#34;&lt;/span&gt; ]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# if OR&lt;/span&gt;
        &lt;span style=&#34;color:#eedd82&#34;&gt;flag1&lt;/span&gt;=true
    &lt;span style=&#34;color:#f00&#34;&gt;elif&lt;/span&gt; [ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;--override&amp;#34;&lt;/span&gt; ] &amp;amp;&amp;amp; [ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$last_arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; ]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# else if AND&lt;/span&gt;
        &lt;span style=&#34;color:#eedd82&#34;&gt;flag_override&lt;/span&gt;=true
    &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# do something with normal arguments here&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# e.g. get line count of arg.&lt;/span&gt;
        wc -l &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
        &lt;span style=&#34;color:#eedd82&#34;&gt;last_arg&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$arg&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# end of if statement&lt;/span&gt;
&lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;  &lt;span style=&#34;color:#0f0&#34;&gt;# signify end of for or while loop&lt;/span&gt;

&lt;span style=&#34;color:#f00&#34;&gt;for&lt;/span&gt; var in &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; str1 str2 str3 &lt;span style=&#34;color:#eedd82&#34;&gt;$flag1&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; 10; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
    echo &lt;span style=&#34;color:#eedd82&#34;&gt;$var&lt;/span&gt;
&lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;

&lt;span style=&#34;color:#0f0&#34;&gt;# less typing for loop using while&lt;/span&gt;
&lt;span style=&#34;color:#eedd82&#34;&gt;counter&lt;/span&gt;=&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#f00&#34;&gt;while&lt;/span&gt; [ counter -ne &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt; ]; &lt;span style=&#34;color:#f00&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color:#0f0&#34;&gt;# conditionals for &amp;#34;booleans&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;if&lt;/span&gt; [ &lt;span style=&#34;color:#eedd82&#34;&gt;$flag_override&lt;/span&gt; = true ]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# MATH&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# this ++ will not affect the next loop&lt;/span&gt;
        ((counter++))
        echo &lt;span style=&#34;color:#eedd82&#34;&gt;$counter&lt;/span&gt;
        &lt;span style=&#34;color:#eedd82&#34;&gt;str_concat&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;+&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$flag_override&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$counter&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;elif&lt;/span&gt; [ &lt;span style=&#34;color:#eedd82&#34;&gt;$flag1&lt;/span&gt; = false ]; &lt;span style=&#34;color:#f00&#34;&gt;then&lt;/span&gt;
        &lt;span style=&#34;color:#0f0&#34;&gt;# use $ for printing math&lt;/span&gt;
        echo &lt;span style=&#34;color:#f00&#34;&gt;$((&lt;/span&gt;++counter&lt;span style=&#34;color:#f00&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;else&lt;/span&gt;
        &lt;span style=&#34;color:#eedd82&#34;&gt;str_concat&lt;/span&gt;=&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;+&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$flag_override&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eedd82&#34;&gt;$counter&lt;/span&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f00&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f00&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Why 64-bit Programs are Better Than 32-bit</title>
      <link>https://elibroftw.github.io/posts/64bit-is-better-than-32bit/</link>
      <pubDate>Sat, 25 Dec 2021 10:30:44 -0600</pubDate>
      
      <guid>https://elibroftw.github.io/posts/64bit-is-better-than-32bit/</guid>
      <description>&lt;p&gt;This article is from a developer point of view, not a user point of view.
The audience of this article are beginner to intermediate developers and is introductory, not argumenatiative.
Do not expect to be convinced if you are pro 32-bit software because Windows decided to support 32-bit software.
From a user point of view, 64-bit computers and software is better because then you can have 100 browser tabs open&lt;/p&gt;
&lt;h3 id=&#34;1-no-4gib-memory-limit&#34; &gt;1. No 4GiB Memory Limit
&lt;span&gt;
    &lt;a href=&#34;#1-no-4gib-memory-limit&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If your application needs more than 4GiB memory, then you definitely need a 32-bit application.
And if you don&amp;rsquo;t need more than 4GiB of memory, you might not want to develop 32-bit development habits because if you do need 4GB in the future, its better for your habits to already work out, that it is to keep in the back of your mind that you need to switch to targetting 64-bit.&lt;/p&gt;
&lt;h3 id=&#34;2-64-bit-users-get-64-bit-applications&#34; &gt;2. 64-bit Users get 64-bit Applications
&lt;span&gt;
    &lt;a href=&#34;#2-64-bit-users-get-64-bit-applications&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;By shipping only 64-bit distrubtions, and only one legacy 32-bit application, most users won&amp;rsquo;t be recommended the wrong architecture.
For example, VLC recommended their 32-bit distribution on my 64-bit computer! Some of my video files are around 20GB so of course 64-bit would be best.&lt;/p&gt;
&lt;h3 id=&#34;3-linux-seamless-installation-for-users&#34; &gt;3. Linux: Seamless Installation for Users
&lt;span&gt;
    &lt;a href=&#34;#3-linux-seamless-installation-for-users&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If you ship 32-bit Linux applications, chances are that your users will now need to install the necessary 32-bit libraries.
Most systems are 64-bit and 32-bit users can continue using legacy software with their package manager.&lt;/p&gt;
&lt;h3 id=&#34;4-64-bit-is-the-default&#34; &gt;4. 64-bit is the Default
&lt;span&gt;
    &lt;a href=&#34;#4-64-bit-is-the-default&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;In Visual Studio 2022, the default target architecture is 64-bit. It used to be 32-bit.
Most users run 64-bit systems, so the default compiler or intrepetor you install, like Python, will also be 64-bit in 2021.&lt;/p&gt;
&lt;h3 id=&#34;5-future-proof--32-bit-compilers&#34; &gt;5. Future Proof &amp;amp; 32-bit Compilers
&lt;span&gt;
    &lt;a href=&#34;#5-future-proof--32-bit-compilers&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;64-bit is objectively more future proof than 32-bit. Rust already has a 128-bit primitive, so 32-bit will definitely be left in the dust if things shift even further. We&amp;rsquo;ve already seen Windows 10 go from &amp;ldquo;last Windows&amp;rdquo; to out of support in 2024. When starting new projects, why sacrifice the stability of your applicaiton in the future, just to support the past?&lt;/p&gt;
&lt;p&gt;My personal grife is a Python project. Over two years ago, I made a music player for Windows, &lt;a href=&#34;https://github.com/elibroftw/music-caster/&#34;&gt;Music Caster&lt;/a&gt;. The relevant details are Python 3.7 64-bit, PyInstaller, and a fork of portaudio that only compiled for 64-bit.
After some time, a user asked me to support 32-bit. Me being naive at the time agreed because I fell prey to the 32-bit supports more users reasoning.&lt;/p&gt;
&lt;p&gt;To support 32-bit applications, I had to uninsatll my existing instllation and then install the 32-bit version of Python. I went with Python 3.8 since Python 3.9 hadn&amp;rsquo;t come out yet. I wish it was that simple, but there&amp;rsquo;s more. I had to figure out how to compile the 32-bit version of the portaudio library. Then another year later, I&amp;rsquo;ve decided to future proof my application, so the journey back from 32-bit Python was just as hard.&lt;/p&gt;
&lt;p&gt;Lesson of the day is to never use a 3.X.0 Python distribution or learn Rust while you are using Python.&lt;/p&gt;
&lt;h3 id=&#34;6-no-emulation&#34; &gt;6. No Emulation
&lt;span&gt;
    &lt;a href=&#34;#6-no-emulation&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;The most common pro 32-bit software argument is also the most ironic. The entire reason emulation exists, that is 32-bit software running on 64-bit Windows,
is Windows supporting legacy software. Creating 32-bit software when 64-bit is possible, is simply ignorant as to why 64-bit exits.&lt;/p&gt;
&lt;p&gt;At the cost of not supporting at most 2% of Windows users, your application won&amp;rsquo;t have to be emulated.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WOW64 is the x86 emulator that allows 32-bit Windows-based applications to run seamlessly on 64-bit Windows. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;64-bit operations are native in 64-bit systems and don&amp;rsquo;t require multiple 32-bit calls
In the end, performance is largely based on optimization, and not so much architecture target, so that&amp;rsquo;s why this is the last section.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conclusion&#34; &gt;Conclusion
&lt;span&gt;
    &lt;a href=&#34;#conclusion&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;I know this article is not a 100% high quality article, but this article isn&amp;rsquo;t argumentative, it&amp;rsquo;s just a run through.&lt;/p&gt;
&lt;p&gt;In conclusion, it&amp;rsquo;s better to distribute 32-bit and 64-bit applications than just 32-bit applications.
But don&amp;rsquo;t be like VLC, and recommend 64-bit computers to install the 32-bit version!&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/winprog64/running-32-bit-applications&#34;&gt;https://docs.microsoft.com/en-us/windows/win32/winprog64/running-32-bit-applications&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>VS Code Remote SSH Tutorial</title>
      <link>https://elibroftw.github.io/posts/vs-code-remote-ssh/</link>
      <pubDate>Wed, 22 Dec 2021 18:23:50 -0500</pubDate>
      
      <guid>https://elibroftw.github.io/posts/vs-code-remote-ssh/</guid>
      <description>&lt;p&gt;In this tutorial we&amp;rsquo;ll integrate SSH into VS Code in a way that won&amp;rsquo;t require entering a password every time.&lt;/p&gt;
&lt;h2 id=&#34;generating-an-ssh-key&#34; &gt;Generating an SSH key
&lt;span&gt;
    &lt;a href=&#34;#generating-an-ssh-key&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re on Windows, you will need to install the OpenSSH feature from Settings or you can use WSL to be able to use &lt;code&gt;ssh-keygen&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can generate an SSH key using &lt;code&gt;ssh-keygen -t ed25519&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Keep track of where the key is stored. For me this would be &lt;code&gt;C:\Users\maste\.ssh\id_ed25519&lt;/code&gt;.
This will be useful when configuring the Remote-SSH VSCode extension.&lt;/p&gt;
&lt;h2 id=&#34;adding-ssh-key-to-authorized-keys&#34; &gt;Adding SSH key to Authorized Keys
&lt;span&gt;
    &lt;a href=&#34;#adding-ssh-key-to-authorized-keys&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;During the process of adding our keys, we&amp;rsquo;ll have to enter our passwords.&lt;/p&gt;
&lt;h3 id=&#34;linux--wsl&#34; &gt;Linux / WSL
&lt;span&gt;
    &lt;a href=&#34;#linux--wsl&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;ssh-copy-id -i path/to/file/if/not/default user@host
&lt;span style=&#34;color:#0f0&#34;&gt;# Examples&lt;/span&gt;
ssh-copy-id -i .ssh/id_ed25519.pub user@host
ssh-copy-id -i /mnt/c/Users/maste/.ssh/id_ed25519.pub user@host
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re having trouble with this, just &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;.ssh&lt;/code&gt; folder and use &lt;code&gt;-i id_ed25519.pub&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;windows-no-wsl&#34; &gt;Windows no WSL
&lt;span&gt;
    &lt;a href=&#34;#windows-no-wsl&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re on Windows, you won&amp;rsquo;t have access to &lt;code&gt;ssh-copy-id&lt;/code&gt;. Instead you can use either of these PowerShell command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;type path\to\id_algo.pub | ssh user&lt;span style=&#34;color:#eedd82&#34;&gt;@host&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;cat &amp;gt;&amp;gt; .ssh/authorized_keys&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#0f0&#34;&gt;# helper: type $env:USERPROFILE\.ssh\id_ed25519.pub | ssh user@host &amp;#34;cat &amp;gt;&amp;gt; .ssh/authorized_keys&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;setting-up-vs-code&#34; &gt;Setting up VS Code
&lt;span&gt;
    &lt;a href=&#34;#setting-up-vs-code&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh&#34;&gt;Remote - SSH extension&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the Command Palette (Ctrl + Shift + P) and use the &amp;ldquo;Remote-SSH: Open SSH Configuration File&amp;hellip;&amp;rdquo; command&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the first path (for me this was &lt;code&gt;C:\Users\maste\.ssh\config&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enter the information for your remote server(s). Here is mine for reference. I had to comment out publickey.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;Host uWaterloo
  User e5lopez
  HostName linux.student.cs.uwaterloo.ca
  IdentityFile &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;C:\Users\maste\.ssh\id_ed25519&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#0f0&#34;&gt;# PreferredAuthentications publickey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the command palette, use &amp;ldquo;Remote-SSH: Connect Current Window to Host&amp;hellip;&amp;rdquo; and select the host you just added&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A window will show up asking you to choose the platform for the remote server. For me, it&amp;rsquo;s Linux.s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If all goes well, you should be able to connect without having to enter a password
&lt;img src=&#34;https://elibroftw.github.io/images/vs-code-remote-ssh/connected-example.png&#34; alt=&#34;VS Code SSH&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A tip is to add multiple folders in the remote server to a workspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Installing Libraries for C&#43;&#43; with Vcpkg and CMake</title>
      <link>https://elibroftw.github.io/posts/vcpkg-cmake-tutorial/</link>
      <pubDate>Sun, 19 Dec 2021 19:51:55 -0500</pubDate>
      
      <guid>https://elibroftw.github.io/posts/vcpkg-cmake-tutorial/</guid>
      <description>
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/FeBzSYiWkEU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;prerequisties&#34; &gt;Prerequisties
&lt;span&gt;
    &lt;a href=&#34;#prerequisties&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;An IDE
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2022&lt;/a&gt; if on Windows for the compiler&lt;/li&gt;
&lt;li&gt;Any IDE that has pretty good CMake integration&lt;/li&gt;
&lt;li&gt;Otherwise, you will need to use &lt;code&gt;cmake&lt;/code&gt; yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A Compiler
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio 2022&lt;/a&gt; if on Windows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gcc&lt;/code&gt; (Linux)&lt;/li&gt;
&lt;li&gt;MSYS2/Mingw &lt;code&gt;gcc&lt;/code&gt; (Windows)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clang&lt;/code&gt; (MacOS?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installing-cmake&#34; &gt;Installing CMake
&lt;span&gt;
    &lt;a href=&#34;#installing-cmake&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;You will need &lt;a href=&#34;https://cmake.org/download/&#34;&gt;CMake 3.22+&lt;/a&gt; in order to use the Visual Studio 2022 compiler through VSCode.
The installer does most of the work, so you won&amp;rsquo;t have to manually add &lt;code&gt;cmake&lt;/code&gt; to PATH.&lt;/p&gt;
&lt;p&gt;In VSCode, you will need to install the &amp;ldquo;C/C++ Extension&amp;rdquo; and the &amp;ldquo;CMake Tools&amp;rdquo; extensions.&lt;/p&gt;
&lt;h3 id=&#34;installing-vcpkg&#34; &gt;Installing Vcpkg
&lt;span&gt;
    &lt;a href=&#34;#installing-vcpkg&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Clone &lt;a href=&#34;https://github.com/microsoft/vcpkg&#34;&gt;vcpkg&lt;/a&gt; into a directory that won&amp;rsquo;t bother you in your day to day life
&lt;ul&gt;
&lt;li&gt;For me, that would be &lt;code&gt;C:\Users\maste\Documents\GitHub\vcpkg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git clone https://github.com/microsoft/vcpkg.git&lt;/code&gt; or GitHub desktop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run the Vcpkg bootstrap script
&lt;ul&gt;
&lt;li&gt;Windows: &lt;code&gt;&amp;quot;./bootstrap-vcpkg&amp;quot; -disableMetrics&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unix: &lt;code&gt;./bootstrap-vcpkg.sh -disableMetrics&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modify environment variables
&lt;ul&gt;
&lt;li&gt;Add the vcpkg cloned directory to PATH
&lt;ul&gt;
&lt;li&gt;On Windows, use Windows search for &amp;ldquo;envir&amp;rdquo;&lt;/li&gt;
&lt;li&gt;On Linux, open your &lt;code&gt;.bashrc&lt;/code&gt; file and add &lt;code&gt;export PATH=$PATH:~/vcpkg&lt;/code&gt; to your &lt;code&gt;.bashrc&lt;/code&gt; file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;VCPKG_DEFAULT_TRIPLET&lt;/code&gt; to &lt;code&gt;x64-windows&lt;/code&gt; on Windows, or your computers triplet
&lt;ul&gt;
&lt;li&gt;Valid architectures are: x86, x64, arm, arm64 and wasm32.&lt;/li&gt;
&lt;li&gt;Valid OS names are &lt;code&gt;&#39;windows&#39;, &#39;linux&#39;, &#39;macos&#39;&lt;/code&gt; (I&amp;rsquo;m unsure about the macos part)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Enable vcpkg packages to be used in VS/MSBuild:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vcpkg integrate install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the path to vcpkg.cmake for use later&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can now install packages using &lt;code&gt;vcpkg install &amp;lt;lib&amp;gt;&lt;/code&gt; and search for them using &lt;code&gt;vcpkg search &amp;lt;lib&amp;gt;&lt;/code&gt;.
In the next section, we&amp;rsquo;ll be integrating &lt;code&gt;vcpkg&lt;/code&gt; within a CMake project.&lt;/p&gt;
&lt;h2 id=&#34;integrating-vcpkg-into-a-new-cmake-project&#34; &gt;Integrating Vcpkg into a new CMake Project
&lt;span&gt;
    &lt;a href=&#34;#integrating-vcpkg-into-a-new-cmake-project&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;p&gt;In this section we&amp;rsquo;ll be creating a CMake C++ project that will make an HTTP request using the &lt;code&gt;cpr&lt;/code&gt; library.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a CMake project in Visual Studio or VSCode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;VS: open visual studio and click &amp;ldquo;Create a new project&amp;rdquo; and search for &amp;ldquo;CMake Project&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VSCode: open an empty folder in VSCode and use &amp;ldquo;CMake: Quick Start&amp;rdquo; from the command palette (Ctrl + Shift + P)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;CMakeLists.txt&lt;/code&gt;, add the following helper target &amp;ldquo;run&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;  add_custom_target(&lt;span style=&#34;color:#87ceeb&#34;&gt;run&lt;/span&gt;
      &lt;span style=&#34;color:#87ceeb&#34;&gt;COMMAND&lt;/span&gt; ${&lt;span style=&#34;color:#eedd82&#34;&gt;PROJECT_NAME&lt;/span&gt;}
      &lt;span style=&#34;color:#87ceeb&#34;&gt;DEPENDS&lt;/span&gt; ${&lt;span style=&#34;color:#eedd82&#34;&gt;PROJECT_NAME&lt;/span&gt;}
      &lt;span style=&#34;color:#87ceeb&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; ${&lt;span style=&#34;color:#eedd82&#34;&gt;CMAKE_PROJECT_DIR&lt;/span&gt;}
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set the CMake toolchain file to the path to &lt;code&gt;vcpkg.cmake&lt;/code&gt; (from step 4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio: Press manage configurations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visual Studio Code: Add the following to your &lt;code&gt;settings.json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;cmake.configureSettings&amp;#34;&lt;/span&gt;: {
    &amp;#34;CMAKE_TOOLCHAIN_FILE&amp;#34;: &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;...vcpkg.cmake&amp;#34;&lt;/span&gt;,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If using &lt;code&gt;cmake&lt;/code&gt; from the command line, add &lt;code&gt;-DCMAKE_TOOLCHAIN_FILE=C:/Users/maste/Documents/GitHub/vcpkg/scripts/buildsystems/vcpkg.cmake&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;vcpkg&lt;/code&gt; response file to maintain portability&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create &lt;code&gt;vcpkg_rf.txt&lt;/code&gt; in the root directory with the contents:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;install
cpr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install dependencies using &lt;code&gt;vcpkg &amp;quot;@vcpkg_rf.txt&amp;quot; [optional arguments]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each library installed, you&amp;rsquo;ll see instructions for what to add or modify in your &lt;code&gt;CMakeLists.txt&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;cpr&lt;/code&gt;, that would be&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt; find_package(&lt;span style=&#34;color:#87ceeb&#34;&gt;cpr&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;CONFIG&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;REQUIRED&lt;/span&gt;)
 target_link_libraries(&lt;span style=&#34;color:#87ceeb&#34;&gt;PROJECT_NAME&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;PRIVATE&lt;/span&gt; &lt;span style=&#34;color:#87ceeb&#34;&gt;cpr::cpr&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;For more than one library, you only need one &lt;code&gt;target_link_libraries&lt;/code&gt; rather than one for each additional library&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now let&amp;rsquo;s code. In the main C++ file, type the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;cpr/cpr.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#e5e5e5&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e5e5e5&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#ee82ee&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#ff0&#34;&gt;main&lt;/span&gt;()
{
    cpr::Response r = cpr::Get(cpr::Url{ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;https://api.github.com/repos/whoshuu/cpr/contributors&amp;#34;&lt;/span&gt; },
        cpr::Authentication{ &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt; },
        cpr::Parameters{ {&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;anon&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;}, {&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;} });
    r.status_code;                  &lt;span style=&#34;color:#0f0&#34;&gt;// 200
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;    r.header[&lt;span style=&#34;color:#87ceeb&#34;&gt;&amp;#34;content-type&amp;#34;&lt;/span&gt;];       &lt;span style=&#34;color:#0f0&#34;&gt;// application/json; charset=utf-8
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;    r.text;                         &lt;span style=&#34;color:#0f0&#34;&gt;// JSON text string
&lt;/span&gt;&lt;span style=&#34;color:#0f0&#34;&gt;&lt;/span&gt;    std::cout &amp;lt;&amp;lt; r.text &amp;lt;&amp;lt; std::endl;
    &lt;span style=&#34;color:#f00&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s test our build&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If something doesn&amp;rsquo;t work, you may need to configure/delete CMake cache using your IDE or doing it manually&lt;/li&gt;
&lt;li&gt;In Visual Studio, just click the green play button&lt;/li&gt;
&lt;li&gt;In Visual Studio Code, you can use the &amp;ldquo;Build: Target&amp;rdquo; and select &amp;ldquo;run&amp;rdquo; from the command palette&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the steps didn&amp;rsquo;t work for you, you can follow &lt;a href=&#34;https://youtu.be/FeBzSYiWkEU&#34;&gt;this tutorial video&lt;/a&gt;.
The video has an example of opening a project in VSCode that was made in Visual Studio.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Creating a Blog With GitHub Pages and Hugo</title>
      <link>https://elibroftw.github.io/posts/hugo-tutorial/</link>
      <pubDate>Fri, 17 Dec 2021 22:18:47 -0500</pubDate>
      
      <guid>https://elibroftw.github.io/posts/hugo-tutorial/</guid>
      <description>&lt;p&gt;I created this blog using Hugo and host it on GitHub Pages. In this tutorial, I&amp;rsquo;ll teach you to do the same.
The resources I had used to create a working blog left out some important details that I will include in my tutorial.
I&amp;rsquo;ve also done the brunt of the work to perfect the theme and workflow.
If you are like me, you can follow the tutorial that &lt;a href=&#34;#forking-my-site&#34;&gt;forks my site&lt;/a&gt; rather than making a blog site &lt;a href=&#34;#from-scratch&#34;&gt;from scratch&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34; &gt;Prerequisites
&lt;span&gt;
    &lt;a href=&#34;#prerequisites&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/installing#binary-cross-platform&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make sure &lt;code&gt;hugo&lt;/code&gt; is available in the PATH environment variable&lt;/li&gt;
&lt;li&gt;Have &lt;code&gt;git&lt;/code&gt; installed and available globally (in PATH)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;forking-my-site&#34; &gt;Forking My Site
&lt;span&gt;
    &lt;a href=&#34;#forking-my-site&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Fork &lt;a href=&#34;https://github.com/elibroftw/elibroftw.github.io&#34;&gt;my repository&lt;/a&gt; into &lt;code&gt;/USERNAME.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;config.yaml&lt;/code&gt; and replace my information with yours&lt;/li&gt;
&lt;li&gt;Use the command &lt;code&gt;hugo new posts/POST.md&lt;/code&gt; to create your posts&lt;/li&gt;
&lt;li&gt;Take a look at my posts in &lt;code&gt;content/posts&lt;/code&gt; before deleting them because they use tags, categories, aliases, allow unlisted posts, and make use of &amp;lt;img /&amp;gt; tags&lt;/li&gt;
&lt;li&gt;To enable the &lt;code&gt;pre-commit&lt;/code&gt; hook, use the command &lt;code&gt;git config core.hookspath .githooks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;pre-commit&lt;/code&gt; hook will auto-update themes and build the site using &lt;code&gt;hugo -d docs&lt;/code&gt; before commiting&lt;/li&gt;
&lt;li&gt;You may need to set the serve folder to &lt;code&gt;docs&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt; under &lt;code&gt;https://github.com/USERNAME/USERNAME.github.io/settings/pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;from-scratch&#34; &gt;From Scratch
&lt;span&gt;
    &lt;a href=&#34;#from-scratch&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;USERNAME.github.io&lt;/code&gt; repository in GitHub&lt;/li&gt;
&lt;li&gt;Clone the repository&lt;/li&gt;
&lt;li&gt;Get the GitHub link for a theme from &lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add the theme using &lt;code&gt;git submodule add GitHubURL.git themes/themeName&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Read the theme instructions for basic configuration (i.e. &lt;code&gt;config.yaml&lt;/code&gt; or &lt;code&gt;config.toml&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;config.yaml&lt;/code&gt; or &lt;code&gt;config.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;hugo new content/posts/POST.md&lt;/code&gt; to create a new post&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;hugo serve -D&lt;/code&gt; when drafting the post&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;draft: false&lt;/code&gt; after you are done drafting a post&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;hugo -d docs&lt;/code&gt; when you are ready to push your website&lt;/li&gt;
&lt;li&gt;Commit and push to origin (GitHub)&lt;/li&gt;
&lt;li&gt;To update themes, use &lt;code&gt;git submodule update --remote --merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can use pre-commit hooks to automate steps 10 and 12 before every commit&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;other-resources&#34; &gt;Other Resources
&lt;span&gt;
    &lt;a href=&#34;#other-resources&#34;&gt;
        &lt;svg viewBox=&#34;0 0 28 23&#34; height=&#34;100%&#34; width=&#34;19&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;path d=&#34;M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;path d=&#34;M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71&#34; fill=&#34;none&#34; stroke-linecap=&#34;round&#34; stroke-miterlimit=&#34;10&#34; stroke-width=&#34;2&#34;/&gt;&lt;/svg&gt;
    &lt;/a&gt;
&lt;/span&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;https://gohugo.io/getting-started/quick-start/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://retrolog.io/blog/creating-a-hugo-theme-from-scratch/&#34;&gt;https://retrolog.io/blog/creating-a-hugo-theme-from-scratch/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://levelup.gitconnected.com/build-a-personal-website-with-github-pages-and-hugo-6c68592204c7&#34;&gt;https://levelup.gitconnected.com/build-a-personal-website-with-github-pages-and-hugo-6c68592204c7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
